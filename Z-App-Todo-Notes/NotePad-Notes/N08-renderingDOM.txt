>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  HTML   <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

<!DOCTYPE html> 
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Todos</title>
</head>
<body>
    <h1>Todos</h1>
    <input id="search-text" type="text" placeholder="Filter todos">
    <label>
        <input type="checkbox" id="hide-completed"> Hide completed
    </label>
    <div id="todos"></div>
    <form id="new-todo">
        <input type="text" placeholder="Something to do" name="text">
        <button>Add Todo</button>
    </form>

    <script src="todo-functions.js"></script>
    <script src="todo-app.js"></script>
</body>
</html>



>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  JAVASCRIPT (Event Listerner)   <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

const notes = getSavedNotes()

const filters = {
    searchText: ''
}

renderNotes(notes, filters)

document.querySelector('#create-note').addEventListener('click', function (e) {
    notes.push({
        title: '',
        body: ''
    }) 
    saveNotes(notes)
    renderNotes(notes, filters)
})

// input event is going to fire on every single character changes
//  --using input event with our text based inputs, allowing us to access that latest information
document.querySelector('#search-text').addEventListener('input', function (e) {
    filters.searchText = e.target.value
    renderNotes(notes, filters)
})

document.querySelector('#filter-by').addEventListener('change', function (e) {
    console.log(e.target.value)
})




>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  JAVASCRIPT (Function)   <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<


// ====> Read existing notes from localStorage
const getSavedNotes = function () {
    const notesJSON = localStorage.getItem('notes')

    if (notesJSON !== null ) {
        return JSON.parse(notesJSON)
    } else {
        return []
    }
}

// Save the notes to localStorage
const saveNotes = function (note) {
    localStorage.setItem('notes', JSON.stringify(notes)) 
}

// ====> Generate the DOM structure for a note
const generateNoteDOM = function (note) {
    const noteEl = document.createElement('div')
    const textEl = document.createElement('span')
    const button = document.createElement('button')

//  Setup the remove note button
    button.textContent = 'x'
    noteEl.appendChild(button)

//  Setup the note title text
    if (note.title.length > 0) {
        textEl.textContent = note.title
    } else {
        textEl.textContent = 'Unnamed note'
    }

    noteEl.appendChild(textEl)

    return noteEl
}

// =====> Render Application Notes 
/*  -- takes all of the notes and filters and it figures out which one matches the filters  */
const renderNotes = function (notes, filters) {
    const filteredNotes = notes.filter(function (note) {
        return note.title.toLowerCase().includes(filters.searchText.toLowerCase())
    })
    // to clear that div entirely when adding new note
    document.querySelector('#notes').innerHTML = ''
    // add filtering notes
    filteredNotes.forEach(function (note) {
        const noteEl = generateNoteDOM(note)
        document.querySelector('#notes').appendChild(noteEl)
    })
}